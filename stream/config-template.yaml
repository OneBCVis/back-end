AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: <your stack description here>
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRealTimeData.Arn}/invocations
              responses: {}
          /replay/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetReplayData.Arn}/invocations
              responses: {}
          /stats/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStats.Arn}/invocations
              responses: {}
          /transaction/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTransaction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  TransactionStream:
    Type: AWS::Kinesis::Stream
    Properties:
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      StreamModeDetails:
        StreamMode: ON_DEMAND
  TransactionPublisher:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TransactionPublisher
      CodeUri: src/TransactionPublisher
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Tracing: Active
      Events:
        TransactionStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TransactionStream.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
  TransactionPublisherLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TransactionPublisher}
  BlockPublisher:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: BlockPublisher
      CodeUri: src/BlockPublisher
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Tracing: Active
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Events:
        BlockStream:
          Type: SQS
          Properties:
            Queue: !GetAtt BlockStream.Arn
            BatchSize: 1
  BlockPublisherLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${BlockPublisher}
  GetRealTimeData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetRealTimeData
      CodeUri: src/GetRealTimeData
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 60
      Tracing: Active
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
  GetRealTimeDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRealTimeData}
  GetReplayData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetReplayData
      CodeUri: src/GetReplayData
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 60
      Tracing: Active
      Events:
        ApiGETreplay:
          Type: Api
          Properties:
            Path: /replay/
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
  GetReplayDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetReplayData}
  GetStats:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetStats
      CodeUri: src/GetStats
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETstats:
          Type: Api
          Properties:
            Path: /stats/
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
  GetStatsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetStats}
  GetTransaction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetTransaction
      CodeUri: src/GetTransaction
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Events:
        ApiGETtransaction:
          Type: Api
          Properties:
            Path: /transaction/
            Method: GET
            RestApiId: !Ref Api
  GetTransactionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetTransaction}
  BlockStream:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 86400
Metadata:
  AWS::Composer::ExternalResources:
    RDS:
      Type: externalRDS
      Settings:
        Port: !Ref RDSPort
        Hostname: !Ref RDSHostname
        SecretArn: !Ref RDSSecretArn
Parameters:
  RDSPort:
    Type: Number
  RDSHostname:
    Type: String
  RDSSecretArn:
    Type: String