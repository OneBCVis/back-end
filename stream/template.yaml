AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: <your stack description here>
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /stream/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStreamData.Arn}/invocations
              responses: {}
          /stats/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStats.Arn}/invocations
              responses: {}
          /transaction/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTransaction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  TransactionStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 5
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      StreamModeDetails:
        StreamMode: PROVISIONED
  TransactionPublisher:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TransactionPublisher
      CodeUri: src/TransactionPublisher
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Tracing: Active
      Events:
        TransactionStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TransactionStream.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
          RDS_USERNAME: !Ref RDSUsername
          RDS_PASSWORD: !Ref RDSPassword
          RDS_DB_NAME: !Ref RDSDBName
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Role: !GetAtt TransactionPublisherRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
          - !Ref VPCSubnet3
  TransactionPublisherLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TransactionPublisher}
  TransactionPublisherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TransactionPublisherRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource: !GetAtt TransactionStream.Arn
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                Resource: !Ref RDSArn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref RDSSecretArn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*

  BlockPublisher:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: BlockPublisher
      CodeUri: src/BlockPublisher
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Tracing: Active
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
          RDS_USERNAME: !Ref RDSUsername
          RDS_PASSWORD: !Ref RDSPassword
          RDS_DB_NAME: !Ref RDSDBName
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Events:
        BlockStream:
          Type: SQS
          Properties:
            Queue: !GetAtt BlockStream.Arn
            BatchSize: 1
      Role: !GetAtt BlockPublisherRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
          - !Ref VPCSubnet3
  BlockPublisherLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${BlockPublisher}
  BlockPublisherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BlockPublisherRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt BlockStream.Arn
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                Resource: !Ref RDSArn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref RDSSecretArn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  GetStreamData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetStreamData
      CodeUri: src/GetStreamData
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 60
      Tracing: Active
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /stream/
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
          RDS_USERNAME: !Ref RDSUsername
          RDS_PASSWORD: !Ref RDSPassword
          RDS_DB_NAME: !Ref RDSDBName
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Role: !GetAtt GetStreamDataRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
          - !Ref VPCSubnet3
  GetStreamDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetStreamData}
  GetStreamDataRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetStreamDataRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                Resource: !Ref RDSArn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref RDSSecretArn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  GetStats:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetStats
      CodeUri: src/GetStats
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETstats:
          Type: Api
          Properties:
            Path: /stats/
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Role: !GetAtt GetStatsRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
          - !Ref VPCSubnet3
  GetStatsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetStats}
  GetStatsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetStatsRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                Resource: !Ref RDSArn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref RDSSecretArn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  GetTransaction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetTransaction
      CodeUri: src/GetTransaction
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          RDS_PORT: !Ref RDSPort
          RDS_HOSTNAME: !Ref RDSHostname
          RDS_SECRETARN: !Ref RDSSecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RDSSecretArn
      Events:
        ApiGETtransaction:
          Type: Api
          Properties:
            Path: /transaction/
            Method: GET
            RestApiId: !Ref Api
      Role: !GetAtt GetTransactionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
          - !Ref VPCSubnet3
  GetTransactionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetTransaction}
  GetTransactionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetTransactionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                Resource: !Ref RDSArn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref RDSSecretArn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  BlockStream:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 86400
      VisibilityTimeout: 60
Metadata:
  AWS::Composer::ExternalResources:
    RDS:
      Type: externalRDS
      Settings:
        Port: !Ref RDSPort
        Hostname: !Ref RDSHostname
        SecretArn: !Ref RDSSecretArn
        Arn: !Ref RDSArn
Parameters:
  RDSPort:
    Type: Number
  RDSHostname:
    Type: String
  RDSSecretArn:
    Type: String
  RDSArn:
    Type: String
  RDSUsername:
    Type: String
  RDSPassword:
    Type: String
  RDSDBName:
    Type: String
  VPCSecurityGroup:
    Type: String
  VPCSubnet1:
    Type: String
  VPCSubnet2:
    Type: String
  VPCSubnet3:
    Type: String